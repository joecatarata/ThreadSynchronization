package main_prog;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.Semaphore;

import synchro.Car;
import synchro.Passenger;

public class Main {

	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		System.out.print("Input the total number of passengers (N): ");
		String[] input = br.readLine().split(" ");
		int N = Integer.parseInt(input[0]);
		int C = N/2;
		Passenger[] threads = new Passenger[N];
		ArrayList<Passenger> thread_list = new ArrayList<Passenger>();
		int mode = -1;
		System.out.println("Input the experiment (1 or 2): ");
		mode = Integer.parseInt(br.readLine());

		Semaphore mutex1 = new Semaphore(1);
		Semaphore mutex2 = new Semaphore(1);
		Semaphore boarding = new Semaphore(0);
		Semaphore unboarding = new Semaphore(0);
		Semaphore doneBoarding = new Semaphore(0);
		Semaphore doneUnboarding = new Semaphore(0);
		System.out.println("Max number of passengers = " + C);
		Car car = new Car(C, boarding, unboarding, doneBoarding, doneUnboarding);
		System.out.println("Starting threads..");
		car.start();
		
		if(mode == 1) {
			for(int i=0; i<N; i++) {
				Passenger thread = new Passenger(C, i+1, mutex1, mutex2, boarding, unboarding
											, doneBoarding, doneUnboarding);
				thread_list.add(thread);
				thread.start();
			}
		}else if(mode == 2){
			//Checks if deadlock happened
			Timer t = new Timer();
//			System.out.println("Checking deadlocked threads every 5 seconds starting now: ");
			t.scheduleAtFixedRate(
			    new TimerTask()
			    {
			        public void run()
			        {
			        	long end = System.currentTimeMillis()+60000;
			        	while(System.currentTimeMillis() < end) {
			        	  // do something
			        	  // pause to avoid churning
			        	  Thread.sleep( xxx );
			        	}
			        	while()
			        	for(int i=0; i<N; i++) {
							Passenger thread = new Passenger(C, i+1, mutex1, mutex2, boarding, unboarding
														, doneBoarding, doneUnboarding);
							thread_list.add(thread);
							thread.start();
						}
			        }
			    }, 0, 1000); 
		}
		
		
		//Checks if deadlock happened
		Timer t = new Timer();
//		System.out.println("Checking deadlocked threads every 5 seconds starting now: ");
		t.scheduleAtFixedRate(
		    new TimerTask()
		    {
		        public void run()
		        {
		        	int deadLockedCtr = 0;
		        	for(int i=0; i<N; i++) {
		    			if(thread_list.get(i).isAlive())
		    					deadLockedCtr++;
		    		}
		        	System.out.println("Checking deadlocked threads every 5 seconds");
		        	System.out.println("Deadlocked threads: " + deadLockedCtr);
		        }
		    }, 5000, 5000); 
	}

}
	